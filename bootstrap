#!/usr/bin/env python3
# Only use builtin libraries for this script
import re
import readline
import subprocess  # nosec
from datetime import date
from pathlib import Path


class BadResponse(Exception):
    """User gave a bad response."""


def run(cmds, **kwargs):
    """Run bash cmd without capturing stdout."""
    subprocess.run(cmds, capture_output=False, check=True, **kwargs)  # nosec


def check_and_install_poetry():
    try:
        subprocess.check_output(["which", "poetry"])  # nosec
        return
    except subprocess.CalledProcessError:
        pass

    run(
        "curl -sSL https://install.python-poetry.org | python3 -",
        shell=True,  # nosec
    )


def camel_to_snake(s):
    return "".join(["_" + c.lower() if c.isupper() else c for c in s]).lstrip("_")


def validate_input(prompt, validate=None, default=""):
    """Prompts user until response passes ``validate``."""
    while True:
        response = input(prompt + ": ")

        if not response:
            response = default

        if validate is None:
            break

        try:
            validate(response)
            break
        except BadResponse as e:
            print(f'"{response}" {e}')
    return response


def git(*args):
    return subprocess.check_output(["git"] + list(args))  # nosec


yes_terms = {"yes", "y", "true", "t", "1"}
no_terms = {"no", "n", "false", "f", "0"}


def is_boolean(response):
    response = response.lower()
    if response not in yes_terms.union(no_terms):
        raise BadResponse


def is_identifier(response):
    if not response.isidentifier():
        raise BadResponse("is not a valid python identifier.")


def is_lower(response):
    if response.lower() != response:
        raise BadResponse("should be all lower case.")


def is_not_empty(response):
    if not response:
        raise BadResponse("Cannot be empty.")


def good_module_name(response):
    is_identifier(response)
    is_lower(response)
    if "_" in response:
        raise BadResponse("should not contain an underscore _")
    if len(response) > 20:
        raise BadResponse("is too long (max 20 char limit).")


def good_class_name(response):
    is_identifier(response)
    if not response[0].isupper():
        raise BadResponse("first letter should be capitalized.")


def remove_lines_in_file(file, lines_to_remove):
    file = Path(file)
    lines_to_remove = [line + "\n" for line in lines_to_remove]
    with file.open("r+") as f:
        lines = f.readlines()
        f.seek(0)

        lines = [line for line in lines if line not in lines_to_remove]
        # Remove all trailing newlines
        while lines[-1] == "\n":
            lines.pop()

        for line in lines:
            f.write(line)

        f.truncate()


def git_remote_to_username_repo(git_remote_url):
    ssh_prefix = "git@github.com:"
    https_prefix = "https://github.com/"
    if git_remote_url.startswith(ssh_prefix):
        username_repo = git_remote_url[len(ssh_prefix) : -4]
    elif git_remote_url.startswith(https_prefix):
        username_repo = git_remote_url[len(https_prefix) : -4]
    else:
        raise ValueError(f"Unknown remote url {git_remote_url}")

    return username_repo.split("/", 1)


def main():
    check_and_install_poetry()

    replacements: dict[str, str] = {
        "CURRENT_YEAR_HERE": str(date.today().year),
    }

    git_remote_url = git("config", "--get", "remote.origin.url").decode().strip()
    try:
        (
            replacements["GIT_USERNAME"],
            replacements["GIT_REPONAME"],
        ) = git_remote_to_username_repo(git_remote_url)
    except ValueError:
        print(
            "Unable to get github URL. You will manually have to replace "
            "GIT_USERNAME and GIT_REPONAME in README.rst"
        )

    replacements["YOUR_NAME_HERE"] = validate_input("Enter your name", is_not_empty)
    replacements["pythontemplate"] = validate_input(
        "Python Module Name", good_module_name
    )
    is_library = validate_input(
        "Is this going to be a library? [default: yes]",
        is_boolean,
        default="yes",
    )
    is_library = is_library in yes_terms

    if is_library:
        # Don't need docker for library.
        Path("Dockerfile").unlink()
        Path(".dockerignore").unlink()
        Path(".github/workflows/docker.yaml").unlink()

    def replace(string):
        """Replace whole words only."""

        def _replace(match):
            return replacements[match.group(0)]

        # notice that the 'this' in 'thistle' is not matched
        return re.sub(
            "|".join(r"\b%s\b" % re.escape(s) for s in replacements), _replace, string
        )

    repo = Path(__file__).parent
    bootstrap_file = repo / "bootstrap"
    files: list[Path] = list(repo.rglob("*.py"))
    files.extend(repo.rglob("*.yaml"))
    files.extend(repo.rglob("*.rst"))
    files.append(Path("pyproject.toml"))

    if not is_library:
        files.append(Path("Dockerfile"))
    for py_file in files:
        contents = py_file.read_text()
        contents = replace(contents)
        py_file.write_text(contents)
        if py_file.stem in replacements:
            dst = py_file.with_name(replacements[py_file.stem] + ".py")
            py_file.replace(dst)

    # Move the app folder
    (repo / "pythontemplate").replace(repo / replacements["pythontemplate"])

    # Move README_TEMPLATE.rst
    (repo / "README_TEMPLATE.rst").replace(repo / "README.rst")

    run(["poetry", "config", "virtualenvs.in-project", "true", "--local"])
    run(["poetry", "install"])
    run(["poetry", "run", "python", "-m", "pre_commit", "install"])

    # Delete this script
    bootstrap_file.unlink()

    git("add", "-A")
    git("commit", "-m", "bootstrap from template")

    print()
    print("Bootstrapping complete. Changes committed. Please run:")
    print("    git push")
    print()


if __name__ == "__main__":
    main()
